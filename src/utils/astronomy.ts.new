/**
 * Get additional information about a celestial object
 */
export function getObjectDetails(objectName: string, date: Date, observer: Observer): any {
  const normalizedName = objectName.toLowerCase();

  // Create an astronomy-engine Observer
  const astroObserver = new Astronomy.Observer(
    observer.latitude,
    observer.longitude,
    observer.elevation
  );
  
  // Check if this is a solar system object
  const isSolarSystemObject = SOLAR_SYSTEM_OBJECTS[normalizedName] ? true : false;
  
  // Handle solar system objects
  if (isSolarSystemObject) {
    // Convert name to Body enum
    const bodyName = normalizedName.charAt(0).toUpperCase() + normalizedName.slice(1);
    let body;
    
    if (normalizedName === 'sun') {
      body = Astronomy.Body.Sun;
    } else if (normalizedName === 'moon') {
      body = Astronomy.Body.Moon;
    } else if (bodyName in Astronomy.Body) {
      body = Astronomy.Body[bodyName as keyof typeof Astronomy.Body];
    } else {
      return null; // Unknown body
    }
    
    // Find rise, set, and culmination times
    const startTime = new Date(date);
    startTime.setHours(0, 0, 0, 0);
    
    let riseTime, transitTime, setTime;
    
    try {
      riseTime = Astronomy.SearchRiseSet(body, astroObserver, 1, startTime, 1);
    } catch (e) {
      riseTime = null; // Object may not rise
    }
    
    try {
      transitTime = Astronomy.SearchHourAngle(body, astroObserver, 0, startTime, 1);
    } catch (e) {
      transitTime = null;
    }
    
    try {
      setTime = Astronomy.SearchRiseSet(body, astroObserver, -1, startTime, 1);
    } catch (e) {
      setTime = null; // Object may not set
    }
    
    // Get distance (for planets, moon)
    let distance = null;
    if (body !== Astronomy.Body.Sun && body !== Astronomy.Body.Earth) {
      try {
        // For the moon, use a different approach
        if (body === Astronomy.Body.Moon) {
          const moonVec = Astronomy.GeoMoon(date);
          distance = {
            au: moonVec.Length(),
            km: moonVec.Length() * Astronomy.KM_PER_AU
          };
        } else {
          // For planets - calculate distance using position vectors
          const bodyPos = Astronomy.HelioVector(body, date);
          const earthPos = Astronomy.HelioVector(Astronomy.Body.Earth, date);
          // Calculate the difference vector
          const dx = bodyPos.x - earthPos.x;
          const dy = bodyPos.y - earthPos.y;
          const dz = bodyPos.z - earthPos.z;
          // Calculate the distance
          const distAu = Math.sqrt(dx*dx + dy*dy + dz*dz);
          distance = {
            au: distAu,
            km: distAu * Astronomy.KM_PER_AU
          };
        }
      } catch (e) {
        // Some objects might not have distance calculation
      }
    }
    
    // Get phase information (for moon and planets)
    let phaseInfo = null;
    if (body !== Astronomy.Body.Sun && body !== Astronomy.Body.Earth) {
      try {
        const illumination = Astronomy.Illumination(body, date);
        phaseInfo = {
          phaseAngle: illumination.phase_angle,
          phasePercent: illumination.phase_fraction * 100,
          isWaxing: illumination.phase_angle < 180
        };
      } catch (e) {
        // Some objects might not have phase calculation
      }
    }
    
    // For the moon, get next phase times
    let moonPhases = null;
    if (body === Astronomy.Body.Moon) {
      moonPhases = {
        nextNewMoon: Astronomy.SearchMoonPhase(0, date, 40),
        nextFirstQuarter: Astronomy.SearchMoonPhase(90, date, 40),
        nextFullMoon: Astronomy.SearchMoonPhase(180, date, 40),
        nextLastQuarter: Astronomy.SearchMoonPhase(270, date, 40)
      };
    }
    
    return {
      riseTime,
      transitTime,
      setTime,
      distance,
      phaseInfo,
      moonPhases
    };
  }
  
  // Handle fixed objects (stars and DSOs)
  // First, get the equatorial coordinates
  let equatorialCoords: EquatorialCoordinates | null = null;
  
  if (STAR_CATALOG.has(normalizedName)) {
    equatorialCoords = STAR_CATALOG.get(normalizedName)!;
  } else if (DSO_CATALOG.has(normalizedName)) {
    equatorialCoords = DSO_CATALOG.get(normalizedName)!;
  } else if (COMMON_NAMES.has(normalizedName)) {
    const catalogName = COMMON_NAMES.get(normalizedName)!;
    if (DSO_CATALOG.has(catalogName)) {
      equatorialCoords = DSO_CATALOG.get(catalogName)!;
    }
  }
  
  // If we found coordinates, calculate rise/set times
  if (equatorialCoords) {
    // For fixed objects, we calculate rise/set times based on spherical astronomy
    // Convert right ascension to degrees
    const raDegrees = equatorialCoords.rightAscension * 15;
    
    // Calculate current Local Sidereal Time (LST)
    const J2000 = new Date('2000-01-01T12:00:00Z').getTime();
    const daysFromJ2000 = (date.getTime() - J2000) / (24 * 3600 * 1000);
    const gmst = 280.46061837 + 360.98564736629 * daysFromJ2000;
    const lst = (gmst + observer.longitude) % 360;
    
    // Calculate hour angle when object rises/sets (altitude = 0)
    // cos(H) = -tan(lat) * tan(dec)
    const latRad = observer.latitude * Math.PI / 180;
    const decRad = equatorialCoords.declination * Math.PI / 180;
    
    const cosH = -Math.tan(latRad) * Math.tan(decRad);
    
    // Check if the object ever rises/sets at this latitude
    if (Math.abs(cosH) > 1) {
      // Object never rises or sets (always above or below horizon)
      const alwaysUp = equatorialCoords.declination > 0 && observer.latitude > 0;
      const alwaysDown = equatorialCoords.declination < 0 && observer.latitude < 0;
      
      return {
        neverSets: alwaysUp,
        neverRises: alwaysDown || (!alwaysUp && Math.abs(cosH) > 1),
        isCircumpolar: Math.abs(cosH) > 1
      };
    }
    
    // Calculate hour angle in degrees
    const hourAngleDeg = Math.acos(cosH) * 180 / Math.PI;
    
    // Calculate rise, transit, and set times relative to the current day
    const startOfDay = new Date(date);
    startOfDay.setHours(0, 0, 0, 0);
    
    // Calculate LST at 0h for this location (in degrees)
    const lst0h = (gmst - (daysFromJ2000 % 1) * 360.98564736629 + observer.longitude) % 360;
    
    // Calculate local hour angle of the object at 0h
    const ha0h = (lst0h - raDegrees + 360) % 360;
    
    // Calculate the hour angle of transit (in degrees)
    const haTransit = 0;
    
    // Calculate transit time (in hours since midnight)
    const transitHours = (24 - (ha0h / 15)) % 24;
    
    // Calculate rise and set times (in hours since midnight)
    const riseHours = (transitHours - hourAngleDeg / 15 + 24) % 24;
    const setHours = (transitHours + hourAngleDeg / 15) % 24;
    
    // Convert to Date objects
    const riseDate = new Date(startOfDay);
    riseDate.setHours(
      Math.floor(riseHours),
      Math.floor((riseHours * 60) % 60),
      Math.floor((riseHours * 3600) % 60)
    );
    
    const transitDate = new Date(startOfDay);
    transitDate.setHours(
      Math.floor(transitHours),
      Math.floor((transitHours * 60) % 60),
      Math.floor((transitHours * 3600) % 60)
    );
    
    const setDate = new Date(startOfDay);
    setDate.setHours(
      Math.floor(setHours),
      Math.floor((setHours * 60) % 60),
      Math.floor((setHours * 3600) % 60)
    );
    
    return {
      riseTime: riseDate,
      transitTime: { time: transitDate },
      setTime: setDate,
      isFixedObject: true
    };
  }
  
  // If we reach here, we couldn't find the object in any catalog
  return null;
}